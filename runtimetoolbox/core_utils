#!/bin/bash
#this is a systemcall for


#basically locks session and prevent any ctrl c escape
sessionlock(){
  trap 'echo q7osterminal are not allowed to quit' SIGINT &
  trap 'echo q7osterminal are not allowed to stop' SIGSTOP &
  echo $sysinitprefix Locking Session


}

# nvram parameter check and refresh request
nvramrefreshreq(){
  if [ ! -d emulatednvram ]; then
  echo NVRAM is not initialized yet
  #!/bin/sh
  #Reset NVRAM using default nvramdbset
  mkdir ${origindir}/emulatednvram
  cd ${origindir}
  export PROOT_NO_SECCOMP=1
  export HOME=/home/$USER
  export SHELL=/bin/bash
  export LD_LIBRARY_PATH=
  # Java doesn't work in PRoot when started from /usr/bin/java symlink, so we have to put a path to java binary into PATH, and Java 6 fails on Samsung devices
  JAVA_PATH=/usr/lib/jvm/default-java/jre/bin:/usr/lib/jvm/default-java/bin
  ls usr/lib/jvm/java-7-openjdk-*/bin > /dev/null 2>&1 && JAVA_PATH=/`echo usr/lib/jvm/java-7-openjdk-*/jre/bin`:/`echo usr/lib/jvm/java-7-openjdk-*/bin`
  export PATH=/usr/local/sbin:/usr/local/bin:$JAVA_PATH:/usr/sbin:/usr/bin:/sbin:/bin
  export PROOT_TMPDIR=prootexec
  export PROOT_TMP_DIR=$PROOT_TMPDIR
  export TZ="`getprop persist.sys.timezone`"
  export PATH=/system/xbin:/system/bin:system/$arch/bin:${origindir}/bootproot/:$PATH
  export FASTBOOT=no
  export XSDLSTARTUP=0
  export BROWSERUX=1
  export LIBGL_FB=3
  export DISPLAY=:0
  export PULSE_SERVER=127.0.0.1:4712
  export HOME=/root
  export TERM=xterm
  export COLORTERM=truecolor
  export startupsel=mainterminal
  export PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/system/xbin:/system/bin:$PATH

  export LC_ALL=en_US.UTF-8
  export LANG=en_US.UTF-8
  export LANGUAGE=en_US.UTF-8

  export QUAVERFS_home=${origindir}/qfs_home.img
  export QUAVERFS_usr=${origindir}/qfs_usr.img
  export QUAVERFS_sbin=${origindir}/qfs_sbin.img
  export QUAVERFS_root=${origindir}/qfs_root.img
  export QUAVERFS_etc=${origindir}/qfs_etc.img
  export QUAVERFS_boot=${origindir}/qfs_boot.img
  export QUAVERFS_cacheinst=${origindir}/qfs_cacheinst.img
  export QUAVERFS_pkgcache=${origindir}/qfs_pkgcache.img
  export QUAVERFS_init0=${origindir}/system.img
  export QUAVERFS_home_size=64G
  export QUAVERFS_usr_size=4G
  export QUAVERFS_sbin_size=1G
  export QUAVERFS_root_size=4G
  export QUAVERFS_etc_size=4G
  export QUAVERFS_boot_size=512M
  export QUAVERFS_cacheinst_size=8G
  export QUAVERFS_pkgcache_size=8G
  export QUAVERFS_init0_size=64G
  export Conf_debug=0
  export limited=0
  export DISABLE_SYSTEMD=0

  mkdir $NVRAMCONF
  cd $NVRAMCONF
  echo $BROWSERUX > BROWSERUX
  echo $DISABLE_SYSTEMD > DISABLE_SYSTEMD
  echo $Conf_debug > Conf_debug
  echo $QUAVERFS_home > QUAVERFS_home
  echo $QUAVERFS_usr > QUAVERFS_usr
  echo $QUAVERFS_sbin > QUAVERFS_sbin
  echo $QUAVERFS_root > QUAVERFS_root
  echo $QUAVERFS_etc > QUAVERFS_etc
  echo $QUAVERFS_boot > QUAVERFS_boot
  echo $QUAVERFS_cacheinst > QUAVERFS_cacheinst
  echo $QUAVERFS_pkgcache > QUAVERFS_pkgcache
  echo $QUAVERFS_init0 > QUAVERFS_init0
  echo $QUAVERFS_home_size > QUAVERFS_home_size
  echo $QUAVERFS_usr_size > QUAVERFS_usr_size
  echo $QUAVERFS_sbin_size > QUAVERFS_sbin_size
  echo $QUAVERFS_root_size > QUAVERFS_root_size
  echo $QUAVERFS_etc_size > QUAVERFS_etc_size
  echo $QUAVERFS_boot_size > QUAVERFS_boot_size
  echo $QUAVERFS_cacheinst_size > QUAVERFS_cacheinst_size
  echo $QUAVERFS_pkgcache_size > QUAVERFS_pkgcache_size
  echo $QUAVERFS_init0_size > QUAVERFS_init0_size
  echo $limited > limited
  echo $LC_ALL > LC_ALL
  echo $LANG > LANG
  echo $LANGUAGE > LANGUAGE
  echo $FASTBOOT > FASTBOOT
  echo $startupsel > startupsel
  echo $XSDLSTARTUP > XSDLSTARTUP
  echo $PROOT_NO_SECCOMP > PROOT_NO_SECCOMP
  echo $HOME > HOME
  echo $SHELL > SHELL
  echo $LD_LIBRARY_PATH > LD_LIBRARY_PATH
  echo $JAVA_PATH > JAVA_PATH
  echo $PATH > PATH
  echo $PROOT_TMPDIR > PROOT_TMPDIR
  echo $PROOT_TMP_DIR > PROOT_TMP_DIR
  echo $TZ > TZ
  echo $LIBGL_FB > LIBGL_FB
  echo $DISPLAY > DISPLAY
  echo $PULSE_SERVER > PULSE_SERVER
  echo $TERM > TERM
  echo $COLORTERM > COLORTERM
  echo $(uname -m) > arch
  echo NVRAM Flush Rewrite Operation success..
  sleep 0

  cd ${origindir}
  else
    echo Loading parameter
    cd ${NVRAMCONF}
    for a in * ; do
    val=$(cat $a)
    export ${a}=${val}
    #echo ${a}=${val}
     done
    cd ${origindir}
  fi

}
#checks level of runtime priveledges
rootprev(){

    if [ $Conf_debug == '1' ]; then
      set -x
    fi


    if [ $1 == 'nonroot' ]; then
      echo Limited Operation Engaged
      export limited=1
      echo $limited > ${NVRAMCONF}/limited
      sleep 0
    fi

    if [ "$EUID" -ne 0 ]
      then
      echo ${compatprefix} ${B} Hardware is not accessible
      echo ${compatprefix} root is not being used or available
      echo ${compatprefix} However if you presist to boot up then we have no choice but to emulate things
      sleep 1
      limited=1
      #echo attempting to access root
      #bambi=$(pwd)
      #su -c "cd ${bambi} ; sh ${bambi}/bootloader.sh $1 "
      #exit
    fi


    if [ $rootreq == '1' ]; then
      if [ -f /sbin/su ]; then
      su -c "cd $wdir ; /bin/sh bootloader.sh"
      echo ${compatprefix} Did it succeed or root is not granted
      echo ${compatprefix}  Device that detected have a root will and have to grant it
      exit
    else
      echo ${compatprefix} no root detected accepting fate
      exit
      cd $wdir ; /bin/sh bootloader.sh nonroot
      exit
    fi
    fi


}


#basically a unified bootloader utility on an single call to script
paramblcall(){


  if [ $1 == 'develkit' ]; then
  clear
  echo This also will update the repository
  sleep 2
  currver=$(cat dist/ver)
  currver=$(( $currver + 1 ))
  echo $currver > dist/ver
  sleep 1
  rm -rf reqbin
  git add .
  git status -s
  chown -R 1000:1000 .
  cd ..
  echo package Compiler started
  #--exclude='./folder'
  #tar cf - /folder-with-big-files -P | pv -s $(du -sb /folder-with-big-files | awk '{print $1}') | gzip > big-files.tar.gz
  #https://superuser.com/questions/168749/is-there-a-way-to-see-any-tar-progress-per-file
  #rm -rf core/.git
  chown -R 1000:1000 core
  chmod -R 777 core
  rm -rf core/emulatednvram
  tar cvzf q7os_DEVELKIT.tar.gz core
  split -b 1500m q7os_DEVELKIT.tar.gz q7os_DEVELKIT_part.tar.gz.
  rm -rf q7os_DEVELKIT
  echo "q7OS build $currver"
  chmod -R 777 core
  date
  exit
  fi




  if [ $1 == 'licensegen' ]; then
    echo Generating LICENSE file
    echo '------------q7os Licenses------------' > ${origindir}/LICENSE.txt
    licensefile=$(grep -ril ${origindir} -e 'license')
    for a in $licensefile ; do
      echo "$a" >> ${origindir}/LICENSE.txt
      cat "$a" >> ${origindir}/LICENSE.txt
    done
    echo '---------------[and thats the code and licenses]----------------' >> ${origindir}/LICENSE.txt
    echo License has been generated
    exit
  fi




  if [ $1 == 'compile' ]; then
  echo Attempting to run adb root if there is Android
  adb root
  echo Checking Backup Schedule
  currver=$(cat dist/ver)
  buildnumberzero=$(( $currver % 3 ))
  if [ $buildnumberzero == '0' ]; then
    echo Its backup time
    sh bootloader.sh develkit
    echo Done
  else
    echo seems $buildnumberzero not yet okaaay
  fi
  sleep 4

  clear
  printf '\e[38;5;221m ' yellow
  echo $compileprefix Removing rm_protect File
  if [ ! -d 000a_rm_protect ]; then
    rm -rf 000*
  fi
  echo $compileprefix This also will update the repository
  sleep 2

  currver=$(cat dist/ver)
  currver=$(( $currver + 1 ))
  echo $currver > dist/ver
  sleep 1
  rm -rf reqbin
  git add .
  git status -s
  chown -R 1000:1000 .
  printf '\e[38;5;042m ' green
  echo $compileprefix running Prepackaging operation
  for i in module/prepackagingscripts/*; do
    echo $compileprefix running $i
    sh $i
  done

  cd ..
  echo $compileprefix package Compiler started
  #--exclude='./folder'
  #tar cf - /folder-with-big-files -P | pv -s $(du -sb /folder-with-big-files | awk '{print $1}') | gzip > big-files.tar.gz
  #https://superuser.com/questions/168749/is-there-a-way-to-see-any-tar-progress-per-file
  #rm -rf core/.git
  chown -R 1000:1000 core
  chmod -R 777 core
  echo $compileprefix Resetting nvram
  rm -rf core/emulatednvram
  echo $compileprefix Resetting Archlinux base tarballs
  rm -rf core/dist/x86_64raw core/dist/armv7lraw core/dist/aarch64raw
  echo 1 > core/dist/reconstructionflag
  echo $compileprefix Resetting reqbin
  rm -rf core/reqbin
  echo $compileprefix Creating Archive
  if [ $2 == 'updatepkg' ]; then
    tar czf q7os.tar.gz  --exclude .git --exclude "*.log" --exclude "system" --exclude "*.img" --exclude "emulatednvram" --exclude "buildenv" --exclude "LICENSE*"  --exclude "dist/arm*"  --exclude "dist/x86*" --exclude reqbin core
  else
  tar czf q7os.tar.gz  --exclude .git --exclude "*.log" --exclude "system" --exclude "*.img" --exclude "emulatednvram" --exclude "buildenv" --exclude "LICENSE*" --exclude reqbin core
  fi
  echo "q7OS build $currver"
  #tar czf - core -P |  pv -s $(du -sb core | awk '{print $1}') | gzip > q7os.tar.gz
  if [ $2 == 'updatepkg' ]; then
    cat core/module/q7pak/installtemplate > update.sh
    md5sum q7os.tar.gz >> update.sh
    cat q7os.tar.gz >> update.sh
    chmod +x update.sh
    rm -rf q7os.tar.gz
    echo $compileprefix compiled successfully became update.sh
    #attempting to push update to nearby Devices using adb
    adb devices
    adb push update.sh /sdcard
    adb shell "su -c 'cd /sdcard ; export HOME=/data/GNU ; sh /sdcard/update.sh'"
    adb shell "find /data/GNU"
    adb shell "reboot"
  else
  cat core/module/q7pak/installtemplate > install.sh
  md5sum q7os.tar.gz >> install.sh
  cat q7os.tar.gz >> install.sh
  chmod +x install.sh
  rm -rf q7os.tar.gz
  echo $compileprefix compiled successfully became install.sh
  #attempting to push update to nearby Devices using adb
  adb devices
  adb push install.sh /sdcard
  adb shell "su -c 'cd /sdcard ; export HOME=/data/GNU ; mkdir /data/GNU ; sh /sdcard/install.sh'"
  adb shell "find /data/GNU"
  adb shell "nohup su -c /system/bin/sh /sdcard/startq7os &"

  fi

  chmod -R 777 core
  date



  exit
  fi


  if [ $1 == 'help' ];then
    echo Bootloader Command
    echo bootloader.sh nonroot to launch q7os without root
    echo bootloader.sh compile to compile q7os became install.sh
    echo bootloader.sh compile updatepkg to compile q7os update package became update.sh
    echo bootloader.sh develkit to compile it became development Kit
    echo bootloader.sh gitinit to initialize the Repository
    echo bootloader.sh gitsync to sync beetween remote and local git repo
    echo bootloader.sh reset to reset system and reinstall completely the system
    exit
  fi

  #https://stackoverflow.com/questions/9577968/how-to-upload-files-on-github
  if [ $1 == 'gitinit' ];then
  rm -rf .git
  git init
  git add .
  git remote add origin https://github.com/Questandachievement7Developer/q7os
  currver=$(cat dist/ver)
  echo q7os build $currver
  git commit -m "Commit of q7os update build $currver "
  git status -s
  exit
  fi

  if [ $1 == 'gitsync' ];then
  git add .
  currver=$(cat dist/ver)
  currver=$(( $currver + 1 ))
  echo $currver > dist/ver
  echo q7os build $currver
  git commit -m "Commit of q7os update build $currver "
  git push origin master
  exit
  fi

  if [ $1 == 'reset' ]; then
    umount -rlf system
    rm -rf system
    rm -rf emulatednvram
    rm -rf system.img
    sh bootloader.sh
    exit
  fi

}

# preloads busybox and setup respectively based on the architecture
boottools(){

  compatibilitycommand="acpid addgroup adduser adjtimex ar arp arping ash
          awk basename beep blkid brctl bunzip2 bzcat bzip2 cal cat
          catv chat chattr chgrp chmod chown chpasswd chpst chroot
          chrt chvt cksum clear cmp comm cp cpio crond crontab
          cryptpw cut date dc dd deallocvt delgroup deluser depmod
          devmem df dhcprelay diff dirname dmesg dnsd dnsdomainname
          dos2unix dpkg du dumpkmap dumpleases busybox echo ed egrep eject
          env envdir envuidgid expand expr fakeidentd false fbset
          fbsplash fdflush fdformat fdisk fgrep find findfs flash_lock
          flash_unlock fold free freeramdisk fsck fsck.minix fsync
          ftpd ftpget ftpput fuser getopt getty grep gunzip gzip hd
          hdparm head hexdump hostid hostname httpd hush hwclock id
          ifconfig ifdown ifenslave ifplugd ifup inetd init inotifyd
          insmod install ionice ip ipaddr ipcalc ipcrm ipcs iplink
          iproute iprule iptunnel kbd_mode kill killall killall5 klogd
          last length less linux32 linux64 linuxrc ln loadfont
          loadkmap logger login logname logread losetup lpd lpq lpr
          ls lsattr lsmod lzmacat lzop lzopcat makemime man md5sum
          mdev mesg microcom mkdir mkdosfs mkfifo mkfs.minix mkfs.vfat
          mknod mkpasswd mkswap mktemp modprobe more mount mountpoint
          mt mv nameif nc netstat nice nmeter nohup nslookup od
          openvt passwd patch pgrep pidof ping ping6 pipe_progress
          pivot_root pkill popmaildir printenv printf ps pscan pwd
          raidautorun rdate rdev readlink readprofile realpath
          reformime renice reset resize rm rmdir rmmod route rpm
          rpm2cpio rtcwake run-parts runlevel runsv runsvdir rx script
          scriptreplay sed sendmail seq setarch setconsole setfont
          setkeycodes setlogcons setsid setuidgid sh sha1sum sha256sum
          sha512sum showkey slattach sleep softlimit sort split
          start-stop-daemon stat strings stty su sulogin sum sv
          svlogd swapoff swapon switch_root sync sysctl syslogd tac
          tail tar taskset tcpsvd tee telnet telnetd test tftp tftpd
          time timeout top touch tr traceroute true tty ttysize
          udhcpc udhcpd udpsvd umount uname uncompress unexpand uniq
          unix2dos unlzma unlzop unzip uptime usleep uudecode uuencode
          vconfig vi vlock volname watch watchdog wc busybox wget which who
          whoami xargs yes zcat zcip"
  if [ -d reqbin ]; then
    echo Busybox Exists
    export PATH=${origindir}/reqbin/
  else
  cp boothelper_${arch} busybox
  #Installing required Binaries
  #end whoops i think i just list all my program xd
  mkdir reqbin
  for i in $compatibilitycommand; do
  cp -r busybox reqbin/$i
  echo $arch $i
  done
  export PATH=${origindir}/reqbin/
  fi
  #Thanks To Pelya for pointing out shmem emulation
  # https://github.com/pelya/debian-noroot/blob/master/dist/proot.sh

  #ELF error and im sad :(
  #export "LD_PRELOAD=bootlib/libdisableselinux.so bootlib/libandroid-shmem.so"
}

#calls quaverfs service and let quaverfs manage systemfiles and stuff
startquaverfsSVC(){
  counting=0
  if [ $limited = '0' ]; then
  img=system.img
  echo "$quaverprefix Initializing.."
  sleep 0
  mknod -m 0755 /dev/QUAVERFS0 b 7 8
  cd ${NVRAMCONF}
  for a in QUAVERFS_* ; do
    counting=$(( $counting + 1 ))
    mknod -m 0755 /dev/QUAVERFS${counting} b 7 8
    tgfilesystem=$(cat $a)
    if [ ! -f $tgfilesystem ]; then
      echo "$quaverprefix based on nvram configuration the filesystem is no where to be seen"
      echo "$quaverprefix Attempting to recreate filesystem"
    busybox dd if=/dev/zero of=$tgfilesystem bs=1 count=0 seek=$(cat ${a}_size)
    busybox mkfs.ext2 -F $tgfilesystem
    echo "$quaverprefix Continuing Procedure"
    fi
  printf '\e[38;5;039m \n' blue
  e2fsck -y $tgfilesystem
  echo "$quaverprefix Checking and initializing $tgfilesystem done"
  #sleep 0.3
  done
fi
}
# if q7OS has been booted then just connect to the terminal that q7OS has been started
sessionconnect(){

  #Go to Terminal instantly # Or Literally Fastboot
  file=system/$arch/bootflag/on
  trap 'echo q7osterminal are not allowed to quit' SIGINT &
  trap 'echo q7osterminal are not allowed to stop' SIGSTOP &
  echo $sysinitprefix Locking Session
  if [ -f $file ] ;then
    #rmProtectFunction Preventing rm -rf core and deleting all Mount data
    bash ${origindir}/module/rmProtectFunction &
    clear
  cd ${origindir}/system/$arch
  if [ $limited == '1' ]; then
    echo Re Welcome Again to q7OS
    proot_${arch} -r . -w /root $ENV -i HOME=/root PATH=/usr/local/sbin:/usr/local/bin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/games:/usr/local/games TERM=$TERM LANG=C.UTF-8 /bin/sh /module/terminalsystemconnect
    exit
  else
  chroot . /bin/bash /usr/bin/screenfetch
  echo Re Welcome Again to q7OS
  #chroot . /bin/bash /usr/bin/fish
  #chroot . /usr/bin/fish
  chroot . /bin/sh /module/terminalsystemconnect
  echo To deboot the system please go to the main Terminal and exit
  exit
  fi
  fi


}

bootstage0msg(){
  clear
  printf '\e[38;5;039m \n' blue
  echo $sysinitprefix Running  $(uname -m) processor
  sleep 0.1
  echo $sysinitprefix Kernel Detection $(uname -r)
  sleep 0.1
  echo $sysinitprefix Initializing q7os on $(uname -o)
  sleep 0.1
  echo q7OS based on Archlinux build by questandachievement7 Developers
  echo Inspired by the simplicity of manjaro Distro and The versitality of termux-arch
  echo Nothing Special About this distro
  printf '\e[38;5;210m ' red
  echo Warning q7OS is NOT a light GNU alternative and may access your whole device components
  sleep 5
  echo q7OS is about to boot up we DO NOT take any responsibility if anything bad happen to your device
  sleep 3
}

systemmountpoint_check_bootstage0(){
  printf '\e[38;5;221m ' yellow

  if [ ! -d /data ]; then
    printf '\e[38;5;210m ' red
    echo "${compatprefix} Strange? /data seems to not exists or detected by the bootloader"
    echo Enforcing Boot
    sleep 2
  fi

  if [ ! -d /system ]; then
    printf '\e[38;5;210m ' red
    echo "${compatprefix} Error /system mount not found!"
    echo "${compatprefix} This wasnt an android at all Please be aware that it may not boot at all"
    echo "${compatprefix} Enforcing Boot"
    sleep 2
  fi

  deer=wdir
  if [ -f $deer ]; then
    echo ah a bambi detected
    wdir=$(cat wdir)
    cd $wdir
    echo $wdir
  else
    wdir=$(pwd)
    echo $wdir > $deer
    cd $wdir
  fi


}

#This function is to inject q7OS as a background service and started up at boot time which speed up the booting process
injectbg_q7OSstartup(){

  if [ ! -f /etc/init.d/000q7osinit ]; then
  echo $sysinitprefix Attempting Disabling systemless mode
  mount -o remount,rw /system
  mount -o remount,rw /
  busybox mount -o remount,rw /system
  busybox mount -o remount,rw /
  echo "cd ${origindir} ; /bin/sh bootloader.sh & " > /etc/init.d/000q7osinit
  echo "cd ${origindir} ; /bin/sh bootloader.sh & " > /system/etc/init.d/000q7osinit
  echo $sysinitprefix Attaching Preloading script for q7os
  fi
}

dist_reconstruction(){
  if [ -f ${origindir}/dist/reconstructionflag ]; then
    echo ${sysinitprefix} Building ${arch} Package
    cat ${origindir}/dist/x86_64/x* > ${origindir}/dist/x86_64raw
    cat ${origindir}/dist/arm7/x* > ${origindir}/dist/armv7lraw
    cat ${origindir}/dist/arm8/x* > ${origindir}/dist/aarch64raw
    echo reconstruction Executed
    rm -rf ${origindir}/dist/reconstructionflag
  fi
}


install_basesystem(){

  mkdir ${origindir}/system

  ls ${origindir}/system

  losetup /dev/QUAVERFS0 $QUAVERFS_init0
  busybox mount -o rw,data=writeback /dev/QUAVERFS0 system

  ls ${origindir}/system


  if [ ! -f ${origindir}/system/installflag ]; then
    ls ${origindir}/system
  cp -v ${origindir}/dist/${arch}raw ${origindir}/system/
  cd ${origindir}/system
  busybox tar -vxf ${arch}raw
  ls ${origindir}/system
  rm -rf ${arch}raw
  echo yes > ${origindir}/system/installflag
  cd ${origindir}
  else
    if [ ! -f ${origindir}/system/${arch}/bin/bash ] ; then
      clear
      reset
      echo $sysinitprefix System Installation Breaks and cannot continue
      echo $sysinitprefix if you believe this is a bug please refer to q7oslog on your /sdcard
      sleep 3
      umount -rlf system
      rm -rf qfs_*
      rm -rf emulatednvram
      rm -rf ${origindir}/system/installflag
      sync
      echo $sysinitprefix Now system will reset NVRAM and Images and restart
      sleep 4
      reboot
      su -c 'reboot'
      poweroff
      exit
    else
      printf '\e[38;5;042m ' green
    fi
  fi
}

#basically communicates with the host OS
outringSUcomm(){
  nohup sh su_bridged &
}
#Mount special Vendor partition to make use of and copy all device specific files for the q7OS to use
vendor_device_replicate(){

    #pass display DENSITY
    wm density > ${origindir}/system/$arch/dpdensity
  cd ${origindir}/system/$arch
  cd ${origindir}/system/$arch
  file=bootflag/on
  if [ -f $file ] ;then
  echo system has been prepared
  else
  export PATH=/system/xbin:/system/bin:$PATH
  mkdir ${origindir}/system/$arch
  cd ${origindir}/system/$arch
  mkdir system
  mkdir sdcard
  mkdir sysfs
  mkdir efs
  mkdir factory
  mkdir data
  mkdir d
  #rmProtectFunction Preventing rm -rf core and deleting all Mount data
  cd ${origindir}
  nohup bash ${origindir}/module/fsProtect/rmProtectFunction &
  cd ${origindir}/system/$arch
  busybox mount --rbind /efs efs
  busybox mount --rbind /factory factory
  busybox mount --rbind /d d
  busybox mount -o remount,rw /data
  busybox mount --rbind /dev dev
  busybox mount --rbind /sys sys
  busybox mount --rbind /system system
  busybox mount --rbind /sdcard sdcard
  busybox mount --rbind /sysfs sysfs
  busybox mount --rbind /data data
  busybox mount --rbind /mnt mnt
  busybox mount --rbind /run run
  busybox mount --rbind /proc proc
  #copying identity
  for i in /* ; do
    if [ -f /$i ]; then
      echo .
    else
  cp -u $i .
  fi
  done
  fi
  #dmesg
}

#configure the system with
preconfig_req(){

  #Remember This already at system ROOT (q7OS root)
  #Transfering Vendor Custom
  cd ${origindir}/system/${arch}
  cp -r ${origindir}/distrocustomization/masterconf/* .
  cp -r ${origindir}/distrocustomization/${arch}/* .
  #Revision Version
  cp -r ${origindir}/dist/ver .
  #transferring CustomBinary
  for i in ${origindir}/custombinary/* ;do
    chmod +x $i
    cp -r $i bin/
  done
  #Linking Custom Services to the SystemFile
  cp -r ${origindir}/bootsystemd .
  cp -r ${origindir}/module .
  cp -r ${origindir}/init .
  cp -r ${origindir}/swapforhackedandroid .
  cp -r ${origindir}/bootlib/libdisableselinux.so .
  cp -r ${origindir}/bootlib/libandroid-shmem.so .

}
#and finally launch the whole system
launchfullsystem(){
  if [ $1 == 'dbg']; then
    chroot . /bin/bash
else
chroot . /bin/bash /init debug
fi


}
